{"version":3,"sources":["components/Editor/Editor.js","components/Previewer/Previewer.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Editor","handleChange","e","props","editMarkdown","target","value","className","onChange","this","id","markdown","Component","marked","setOptions","breaks","renderer","Renderer","link","href","title","text","Previewer","dangerouslySetInnerHTML","__html","placeholder","App","state","setState","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6UAoBeA,G,YAjBf,2MACEC,aAAe,SAACC,GACd,EAAKC,MAAMC,aAAaF,EAAEG,OAAOC,QAFrC,wEAKI,OACE,yBAAKC,UAAU,UACb,yBAAKA,UAAU,UACb,uBAAGA,UAAU,gBACb,yCAEF,8BAAUC,SAAUC,KAAKR,aAAcS,GAAG,SAASJ,MAAOG,KAAKN,MAAMQ,gBAX7E,GAA4BC,c,wBCE5BC,IAAOC,WAAW,CACdC,QAAQ,IAGZ,IAAMC,EAAW,IAAIH,IAAOI,SAC5BD,EAASE,KAAO,SAAUC,EAAMC,EAAOC,GACrC,MAAM,4BAAN,OAAmCF,EAAnC,aAA4CE,EAA5C,SAGF,IAYeC,EAZG,SAAC,GAAgB,IAAfX,EAAc,EAAdA,SAClB,OACE,yBAAKJ,UAAU,WACb,yBAAKA,UAAU,UACb,uBAAGA,UAAU,eACb,4CAEF,yBAAKG,GAAG,UAAUa,wBAAyB,CAACC,OAAQX,IAAOF,EAAU,CAAEK,SAAUA,SCfjFS,EAAW,8qCAmEFC,E,2MAlBbC,MAAM,CACJhB,SAASc,G,EAEXrB,aAAa,SAAAiB,GACX,EAAKO,SAAS,CACZjB,SAASU,K,wEAIX,OACE,yBAAKd,UAAU,OACb,kBAAC,EAAD,CAAQH,aAAcK,KAAKL,aAAcO,SAAUF,KAAKkB,MAAMhB,WAC9D,kBAAC,EAAD,CAAWA,SAAUF,KAAKkB,MAAMhB,gB,GAbtBkB,IAAMjB,WC1CJkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.cb8cf48d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Editor.scss\";\r\n\r\nexport class Editor extends Component {\r\n  handleChange = (e) => {\r\n    this.props.editMarkdown(e.target.value)\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"editor\">\r\n        <div className=\"header\">\r\n          <i className=\"fas fa-edit\" />\r\n          <span>Editor</span>\r\n        </div>\r\n        <textarea onChange={this.handleChange} id='editor' value={this.props.markdown}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Editor;\r\n","import React from \"react\";\r\nimport './Previewer.scss';\r\nimport marked from 'marked';\r\n\r\n//sets the option for line breaks\r\nmarked.setOptions({\r\n    breaks: true,\r\n  });\r\n//inserts target='_blank' into href tags\r\nconst renderer = new marked.Renderer();\r\nrenderer.link = function (href, title, text) {\r\n  return `<a target=\"_blank\" href=\"${href}\">${text}</a>`;\r\n}\r\n\r\nconst Previewer = ({markdown}) => {\r\n  return (\r\n    <div className=\"preview\">\r\n      <div className=\"header\">\r\n        <i className=\"fas fa-eye\" />\r\n        <span>Previewer</span>\r\n      </div>\r\n      <div id=\"preview\" dangerouslySetInnerHTML={{__html: marked(markdown, { renderer: renderer })}} ></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Previewer;\r\n","import React from \"react\";\nimport './App.scss'\nimport Editor from \"../Editor/Editor\";\nimport Previewer from \"../Previewer/Previewer\";\n\n//initial placeholder value for the editor\nconst placeholder = \n`# Welcome to my React Markdown Previewer!\n\n## This is a sub-heading...\n### And here's some other cool stuff:\n  \nHeres some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n  \nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.com), and\n> Block Quotes!\n\nAnd if you want to get really crazy, even tables:\n\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | ------------- \nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n\n1. And there are numbererd lists too.\n1. Use just 1s if you want! \n1. But the list goes on...\n- Even if you use dashes or asterisks.\n* And last but not least, let's not forget embedded images:\n\n![React Logo w/ Text](https://goo.gl/Umyytc)\n`\n\nclass App extends React.Component {\n  state={\n    markdown:placeholder\n  }\n  editMarkdown=text=>{\n    this.setState({\n      markdown:text\n    })\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <Editor editMarkdown={this.editMarkdown} markdown={this.state.markdown}/>\n        <Previewer markdown={this.state.markdown}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './scss/reset.scss';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}